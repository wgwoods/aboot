This is aboot 0.8. It is still under development and should be
considered beta-quality. 

New features: 
* listing directories on isofs works
* symlinks on isofs work (including ".." in paths)
* new and (hopefully) improved man pages

Bug fixes: 
* Crash when booting from a path containing a long filename fixed
* Failure to boot when kernel was past block 524288 on a ext2 fs fixed

Still todo: 
* Testing, testing, testing

Good luck and enjoy...

-Will Woods <will.woods@compaq.com>

------------------------------------------------------------------

This is release 0.7 of aboot, the Linux/Alpha loader for SRM.

Aboot is based on the standard Linux/Alpha bootloader, with extensions
by David Mosberger and Michael Schwingen (prompt for arguments, kernel
argument mapping using /etc/aboot.conf file).

For a detailed description, see the SRM Firmware HOWTO available at

	http://www.azstarnet.com/~axplinux/srm.html

---
New with version 0.7:

 - aboot now supports an initial ramdisk, which can be loaded from an
   arbitrary file on any supported filesystem.  To use this, pass an
   'initrd=/path/to/file' argument in the boot flags, or use the 'i'
   command from the interactive menu.

 - a.out support has been removed.

 - (as of 0.7a) "raw" booting no longer is - you must use an
   uncompressed ELF kernel.

 - Many bugs in the ISO filesystem code have been found and fixed.

 - swriteboot incorporates the functionality of abootconf.

New with version 0.6:

 - The various patches from the Red Hat, Debian, and SuSE packages
   have been merged back in.

 - ext2 partitions with >1024 byte block sizes and sparse superblocks
   are now (hopefully) supported. (from Red Hat?)

 - aboot can now follow symbolic links on ext2 filesystems.

 - aboot no longer passes the bootdevice= and bootfile= flags to the
   kernel, as the code for guessing the boot device was completely
   broken, and these options are not used at all by current kernels.

 - aboot is now built as an ELF image (since that's what the current
   toolchain supports), and code to strip it accordingly has been
   added (from Richard Henderson)

 - isomarkboot now has an option to specify the root filesystem image
   to be loaded (from Debian)

 - swriteboot tries to preserve the boot partition setting from a
   previous aboot installation.


New with version 0.5:

 - IMPORTANT: e2writeboot now expects a _raw_ file, not an ECOFF
   object file.  So be sure to write aboot using the command:

	e2writeboot /dev/fd0 bootlx

   This change has been made so e2writeboot and s2writeboot are more
   consistent.  It also makes it easier to support multiple object
   file formats.

 - The location the partition containing /etc/aboot.conf can now be
   specified on the commandline: -fl 3:0 selects the aboot.conf line
   0 on partition 3.
 
 - Booting of ELF object files is now supported.  In the process of
   adding ELF suport, the build tool has been rewritten from scratch
   (it's now a lot simpler despite supporting two object file
   formats).

 - Booting from an ext2fs partition that starts at an offset >= 2GB
   now works.

 - If the kernel load fails, aboot now drops into interactive mode
   instead of 

 - swriteboot now supports an option to force installation of aboot even
   if there is an overlap between the aboot image and some partition. E.g.,
   if partition 1 and 3 start at sector 0 (as is commonly the case for disks
   partitioned under OSF/1), you can specify:

	swriteboot -f1 -f3 /dev/sdc bootlx

   WARNING: Using -f will obviously destroy any filesystem that may be
	    present on the specified partition.  Use at your own risk.

 - NOTE: I'd like to remove sdisklabel in future distributions (minlabel
   should be all you need).  Let me know if you feel strongly about this
   (one way or the other).


New with version 0.4:

 - abootconf allows to set (or query) the number of the partition that
   aboot will use to lookup /etc/aboot.conf.

 - support for net boot added (thanks to Dave Larson <dlarson@cs.arizona.edu>)

 - iso9660 filesystem support added (based on Dave Rusling's MILO sources)


New with version 0.31:

 - e2writeboot is now included in the distribution.

 - started with writing man pages for e2writeboot and swriteboot; pretty
   cryptic, I believe, but heck, it's the best there is! :-)


New with version 0.3:

 - The commandline prompt changed to "aboot>".

 - The contents of /etc/aboot.conf can be displayed with a commandline
   argument consisting of a single 'h'.  After displaying the configuration
   file, aboot will prompt for a commandline just like for the 'i' option.

 - At the "aboot>" prompt, the user can enter a single 'h' to display
   the configuration file.  Entering an empty line or a line consisting
   of a single 'i' will keep the user in the "aboot>" prompt loop.

 - Booting of raw (headerless) kernels is now supported again.  A raw
   boot is requested by specifying a filename consisting of a single
   '-' character only.  Booting ECOFF kernels off a disk without filesystem
   is now supported via partition number 0 (in aboot-0.2, this was incorrectly
   called a "raw boot").  For example, to boot a compressed ECOFF file,
   one could specify the filename "0/-" (filename "-" on the zeroth
   partition).  You can use the swriteboot command to write the kernel
   for a filesystem-less boot.

 - Booting from floppy disks now works again.


New with version 0.2:

 - If the kernel commandline consists of a single 'i', aboot prompts for
   kernel file and commandline arguments (useful on machines such as
   the Jensen, where the SRM limits commandline arguments to 1 argument).

 - If the kernel commandline consists of a single digit, aboot looks up
   the default configuration with that number in the file /etc/aboot.conf
   on a compile-time defined partition of the bootdrive, and uses the
   parameters given there as commandline arguments for the kernel (useful
   where the SRM limits default commandline arguments to 8 characters,
   and does not support setting a default filename).

 - If the kernel filename consists of a single '-' or is empty, aboot
   will perform a raw boot.  This involves loading a kernel starting at
   the disk sector after the aboot code (currently, 162).  This kernel
   must be a header-less ("raw") binary without any ECOFF header.


New with version 0.1:

 - Compressed kernels (using gzip) are supported (faster loading, less
   disk usage).

 - You can load the kernel from an UFS or EXT2 filesystem on any partition
   of the boot disk.

